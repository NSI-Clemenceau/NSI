m


def decode_bin_latin1(message: str) -> str:
    clair = ''
    octets = [message[8*k:8*(k+1)] for k in range(len(message) // 8)]
    for octet in octets:
        clair += chr(int(octet, 2))
    return clair


def decode_bin_utf8(message: str) -> str:
    clair = ''
    octets = [message[8*k:8*(k+1)] for k in range(len(message) // 8)]
    combien_d_octets = len(octets)
    octets_lus = 0
    while octets_lus < combien_d_octets:
        octet = octets[octets_lus]
        nb_octets_supplémentaires = 0
        car = 0
        while octet[car] == '1':
            nb_octets_supplémentaires += 1
            car += 1
        if nb_octets_supplémentaires == 0:
            octets_lus += 1
            clair += chr(int(octet, 2))
        else:
            lettre = octet[3:]
            octets_lus += 1
            for octet_a_lire in range(1, nb_octets_supplémentaires):
                lettre += octets[octets_lus][2:]
                octets_lus += 1
            clair += chr(int(lettre, 2))
    return clair

def car2Utf8(c: str) -> str:
    """code utf8 d'un caractère latin1"""
    latin = bin(ord(c))[2:]
    if len(latin) > 7:
        u = '110' + '0'*3 + latin[:2] + '10' + latin[2:]
    else:
        u = '0'*(8 - len(latin)) + latin
    return hex(int(u,2))[2:]


def toUtf8(s: str) -> str:
    """Transforme une phrase en français en son codage utf8"""
    return  ''.join((car2Utf8(c) for c in s))

#print(toUtf8("Bonne année 2020 chers élèves adorés !"))
print(decode_bin_utf8(m))